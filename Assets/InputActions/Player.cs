//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""FoggyForest"",
            ""id"": ""9ffcfca6-f0b3-46f5-ad61-56994ea633d8"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""17bd8a27-3723-4569-949d-7210b002d94e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7d4d15f-0585-4c00-9be8-355bcced16f5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31abfc18-eae2-4c00-8b7b-6fab3bdab612"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LarrysQuest"",
            ""id"": ""e2d2e59f-9014-429e-afa8-c15b2de43964"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ace8973c-1626-448a-a4e3-24f43a0f8186"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""6a25c15e-06b6-42d7-aadb-2810f6d69a26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f34010b-c1f5-444c-832b-3787fea3594d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67f4ece4-0cf7-425b-955a-cf8eb0cc8119"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cafbef59-fe94-4d3a-bcca-45dc81e60fc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f970d585-6d5e-4e22-a0fd-3152fba1c9fc"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": []
        }
    ]
}");
        // FoggyForest
        m_FoggyForest = asset.FindActionMap("FoggyForest", throwIfNotFound: true);
        m_FoggyForest_Jump = m_FoggyForest.FindAction("Jump", throwIfNotFound: true);
        // LarrysQuest
        m_LarrysQuest = asset.FindActionMap("LarrysQuest", throwIfNotFound: true);
        m_LarrysQuest_Move = m_LarrysQuest.FindAction("Move", throwIfNotFound: true);
        m_LarrysQuest_Click = m_LarrysQuest.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FoggyForest
    private readonly InputActionMap m_FoggyForest;
    private IFoggyForestActions m_FoggyForestActionsCallbackInterface;
    private readonly InputAction m_FoggyForest_Jump;
    public struct FoggyForestActions
    {
        private @Player m_Wrapper;
        public FoggyForestActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FoggyForest_Jump;
        public InputActionMap Get() { return m_Wrapper.m_FoggyForest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FoggyForestActions set) { return set.Get(); }
        public void SetCallbacks(IFoggyForestActions instance)
        {
            if (m_Wrapper.m_FoggyForestActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_FoggyForestActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FoggyForestActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FoggyForestActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_FoggyForestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public FoggyForestActions @FoggyForest => new FoggyForestActions(this);

    // LarrysQuest
    private readonly InputActionMap m_LarrysQuest;
    private ILarrysQuestActions m_LarrysQuestActionsCallbackInterface;
    private readonly InputAction m_LarrysQuest_Move;
    private readonly InputAction m_LarrysQuest_Click;
    public struct LarrysQuestActions
    {
        private @Player m_Wrapper;
        public LarrysQuestActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LarrysQuest_Move;
        public InputAction @Click => m_Wrapper.m_LarrysQuest_Click;
        public InputActionMap Get() { return m_Wrapper.m_LarrysQuest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LarrysQuestActions set) { return set.Get(); }
        public void SetCallbacks(ILarrysQuestActions instance)
        {
            if (m_Wrapper.m_LarrysQuestActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnMove;
                @Click.started -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_LarrysQuestActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_LarrysQuestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public LarrysQuestActions @LarrysQuest => new LarrysQuestActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    public interface IFoggyForestActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ILarrysQuestActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
